{"version":3,"sources":["app.js","routes.js","date.js","dashboard.js","screener.js","accounting.js","reports.js","backtest.js","trades.js","trade-groups.js","settings.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1bhIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["var ws;\nvar heartbeat = null;\nvar missed_heartbeats = 0;\nvar app = angular.module('app', [ 'ngRoute' ]);\n\n//\n// Site wide controller.\n//\napp.controller('SiteWideCtrl', function ($scope, $http) {\n  \n  $scope.tab = '';\n  $scope.custom_header_notice = '';\n  $scope.ws_reconnecting = false;\n  $scope.messaging_activated = true;\n  $scope.apple_messaging_activated = true;  \n  $scope.order = {};\n  $scope.logged_in_user = {};\n  $scope.preview_credit_spreads = false;\n  $scope.preview_credit_spreads_data = {};\n  \n  $scope.global_stats = {\n    snp_30_rank: 0,\n    snp_60_rank: 0,\n    snp_90_rank: 0, \n    snp_365_rank: 0            \n  }\n\n  // --------------- Get Logged In User ----- //\n\n  $scope.refresh_logged_in_user = function () {\n    // Make API call to get the data.\n    $http.get('/api/v1/me').success(function (json) {\n      $scope.logged_in_user = json.data;\n    });\n  }\n  \n  $scope.refresh_logged_in_user();\n\n  // --------------- Manage Global Stats ----- //\n  \n  $scope.manage_global_stats = function () {\n    \n    // Get 30day snp 500 IV Rank.\n    $http.get('/api/v1/quotes/get_snp_500_rank/30').success(function (json) {\n      $scope.global_stats.snp_30_rank = json.data.Rank;\n    });\n\n    // Get 60day snp 500 IV Rank.\n    $http.get('/api/v1/quotes/get_snp_500_rank/60').success(function (json) {\n      $scope.global_stats.snp_60_rank = json.data.Rank;\n    });\n\n    // Get 90day snp 500 IV Rank.\n    $http.get('/api/v1/quotes/get_snp_500_rank/90').success(function (json) {\n      $scope.global_stats.snp_90_rank = json.data.Rank;\n    });\n\n    // Get 365day snp 500 IV Rank.\n    $http.get('/api/v1/quotes/get_snp_500_rank/365').success(function (json) {\n      $scope.global_stats.snp_365_rank = json.data.Rank;\n    });\n    \n  }\n  \n  // Catch Websocket event - Timmer:60seconds - just a timer that fires every 60 seconds \n  $scope.$on('Timmer:60seconds', function (event, args) { \n    $scope.manage_global_stats();    \n  });  \n  \n  $scope.manage_global_stats();\n\n  // --------------- Manage Custom Notice ----- //\n  \n  // When the socket connects and sends us a custom notice message\n  $scope.$on('HeaderNotice:message', function (event, args) {        \n    $scope.custom_header_notice = args.data;\n  });  \n\n  // --------------- Manage Orders ------------ //\n  \n  // order-preview:credit-spreads\n  $scope.$on('order-preview:credit-spreads', function (event, data) {\n    $scope.preview_credit_submit_btn = 'Place Order';\n    $scope.order = data.order;\n    $scope.preview_credit_spreads_data = data.preview;\n    $scope.preview_credit_spreads = true;\n    window.scrollTo(0, 0);\n  });  \n  \n  // Cancel button.\n  $scope.order_cancel = function ()\n  {\n    $scope.order = {};\n    $scope.preview_credit_spreads_data = {};\n    $scope.preview_credit_spreads = false;    \n  }\n  \n  // Submit order.\n  $scope.submit_order = function ()\n  {\n    // Make sure we do not double order.\n    if($scope.preview_credit_submit_btn == 'Submitting.....')\n    {\n      return false;\n    }\n    \n    $scope.preview_credit_submit_btn = 'Submitting.....';\n    $scope.order.preview = 'false';\n\n    $http.post('/api/v1/trades/preview_trade', { order: $scope.order }).success(function (json) {\n      $scope.order = {};\n      $scope.preview_credit_spreads_data = {};\n      $scope.preview_credit_spreads = false;\n      $scope.preview_credit_submit_btn = 'Place Order';\n    });\n\n  }\n\n  // --------------- Ping the server every so often ------  //\n  \n  function server_ping()\n  {\n    $http.get('/api/v1/me/ping').success(function (json) {\n      //console.log(json);\n    }); \n  }\n  \n  setInterval(function () { server_ping(); }, (20 * 1000));\n\n  \n  // --------------- Start Web Sockets -------------------- //\n    \n  //\n  // Startup the websocket\n  //\n  function createWebSocket () \n  {\n    ws = new WebSocket('wss://' + site.ws_url + '/ws/core');\n    \n    // Websocket sent data to us.\n    ws.onmessage = function(e) \n    { \n      var msg = JSON.parse(e.data);\n      \n      // Some special cases send \"job\" instead of \"type\"\n      if(msg.job)\n      {\n        msg.type = msg.job;\n        msg.data = msg.data.Payload;\n      }\n      \n      // Is this a pong to our ping or some other return.\n      if(msg.type == 'pong')\n      {\n        missed_heartbeats--;\n      } else\n      {\n        $scope.$broadcast(msg.type, { data: msg.data, timestamp: msg.timestamp }); \n      }\n    };\n    \n    // On Websocket open\n    ws.onopen = function(e) \n    {\n      $scope.ws_reconnecting = false;\n  \n      // Setup the connection heartbeat\n      if(heartbeat === null) \n      {\n        missed_heartbeats = 0;\n        \n        heartbeat = setInterval(function() {\n         \n          try {\n            missed_heartbeats++;\n            \n            if(missed_heartbeats >= 5)\n            {\n              throw new Error('Too many missed heartbeats.');\n            }\n            \n            ws.send(JSON.stringify({ type: 'ping' }));\n            \n          } catch(e) \n          {\n            $scope.ws_reconnecting = true;\n            clearInterval(heartbeat);\n            heartbeat = null;\n            console.warn(\"Closing connection. Reason: \" + e.message);\n            ws.close();\n          }\n          \n        }, 5000);\n      } else\n      {\n        clearInterval(heartbeat);\n      }\n      \n      // We need to get WS API key to do anything fun.\n      $http.post('/api/v1/me/get_websocket_key', {}).success(function (json) {\n      \n        // If failed do nothing.\n        if(! json.status)\n        {\n          return false;\n        }\n      \n        // Send websocket key\n        ws.send(JSON.stringify({ type: 'ws-key', data: json.data.key }));  \n      });      \n  \n    };\n    \n/*\n    ws.onerror = function(e) {\n            \n      // clear heartbeat\n      clearInterval(heartbeat);\n      heartbeat = null;\n      \n      $scope.ws_reconnecting = true;\n      $scope.$apply();\n    }\n*/\n    \n    // On Close\n    ws.onclose = function () \n    {      \n      // Kill Ping heartbeat.\n      clearInterval(heartbeat);\n      heartbeat = null;\n      \n      // Try to reconnect\n      $scope.ws_reconnecting = true;\n      setTimeout(function () { createWebSocket(); }, 3 * 1000);\n      $scope.$apply();\n    }\n      \n  }\n  \n  // Start websockets by getting a websocket key first.\n  createWebSocket();\n\t\n  // --------------- End Web Sockets -------------------- //\n  \n  \n  // -------------- Setup Service Worker & Push Messages ----------- //\n     \n  // UnSubscribe to google messaging.\n  $scope.messaging_unsubscribe = function ()\n  {     \n    navigator.serviceWorker.ready.then(function(serviceWorkerRegistration) {\n\n      serviceWorkerRegistration.pushManager.getSubscription().then(function(pushSubscription) {\n        \n        // Check we have a subscription to unsubscribe\n        if(! pushSubscription) \n        {\n          return;\n        }\n\n        // TODO: Make a request to your server to remove\n        // the users data from your data store so you\n        // don't attempt to send them push messages anymore\n\n        // We have a subcription, so call unsubscribe on it\n        pushSubscription.unsubscribe().then(function(successful) {\n          \n          // Show activate button.\n          $scope.messaging_activated = false;\n          \n        }).catch(function(e) {\n          console.log('Unsubscription error: ', e);\n        });\n      \n      }).catch(function(e) {\n        console.log('Error thrown while unsubscribing from ' + 'push messaging.', e);\n      });\n  \n    });\n    \n  }\n  \n  // Subscribe to google messaging.\n  $scope.messaging_subscribe = function ()\n  {\n    // Subscribe.....\n    navigator.serviceWorker.ready.then(function(serviceWorkerRegistration) {\n      \n      serviceWorkerRegistration.pushManager.subscribe({ userVisibleOnly: true }).then(function(subscription) {\n\n        // Build post to send to the server.\n        var post = {\n          UserToDeviceType: 'GCM Browser',\n          UserToDeviceGcmEndPoint: subscription.endpoint\n        }\n\n        // Send information to the server to store.\n        $http.post('/api/v1/usertodevice/create', post).success(function (json) {\n            //console.log(json);\n        });\n        \n        // Hide activate button.\n        $scope.messaging_activated = true;\n        \n      }).catch(function(e) {\n        \n        if(Notification.permission === 'denied') \n        {\n          console.log('Permission for Notifications was denied');\n        } else \n        {\n          console.log('Unable to subscribe to push.', e);\n        }\n      \n      });\n    \n    });    \n  }     \n     \n  // Check that service workers are supported, if so, progressively\n  // enhance and add push messaging support, otherwise continue without it.\n  if('serviceWorker' in navigator) \n  {\n    // Register service working and do some stuff after.\n    navigator.serviceWorker.register('/service-worker').then(function () {\n    \n      // Are Notifications supported in the service worker?\n      if(! ('showNotification' in ServiceWorkerRegistration.prototype)) \n      {\n        console.log('Notifications aren\\'t supported.');\n        return;\n      }\n\n      // Check the current Notification permission.\n      // If its denied, it's a permanent block until the\n      // user changes the permission\n      if(Notification.permission === 'denied') \n      {\n        console.log('The user has blocked notifications.');\n        return;\n      }\n\n      // Check if push messaging is supported\n      if(! ('PushManager' in window)) \n      {\n        console.log('Push messaging isn\\'t supported.');\n        return;\n      }\n  \n      // We need the service worker registration to check for a subscription\n      navigator.serviceWorker.ready.then(function(serviceWorkerRegistration) {\n    \n        // Do we already have a push message subscription?\n        serviceWorkerRegistration.pushManager.getSubscription().then(function(subscription) {  \n\n          // Do we have a subscription?\n          if(! subscription) \n          {            \n            $scope.messaging_activated = false;\n            return;\n          }\n          \n          // Build post to send to the server.\n          var post = {\n            UserToDeviceType: 'GCM Browser',\n            UserToDeviceGcmEndPoint: subscription.endpoint\n          }\n\n          // Send information to the server to store.\n          $http.post('/api/v1/usertodevice/create', post).success(function (json) {\n            //console.log(json);\n          });\n\n        }).catch(function(err) {\n          console.log('Error during getSubscription()', err);\n        });\n    \n      });\n    \n    });\n  } else \n  {\n    console.log('Service workers aren\\'t supported in this browser.');\n  } \n  \n  \n  // -------------- End Service Worker & Push Messages ----------- //\n  \n  // -------------- Setup Apple Push Notifications ----------- //  \n  \n  var pushId = \"web.cloudmanic.stockpeer\";\n  \n  // See if there is messaging.\n  if('safari' in window && 'pushNotification' in window.safari) \n  {\n    var perms_data = window.safari.pushNotification.permission(pushId);\n    \n    // See if we should show the notification\n    if(perms_data.permission == 'default')\n    {\n      $scope.apple_messaging_activated = false;\n    }\n  }\n  \n  // Push notification On activiation.\n  $scope.apple_push_notification = function ()\n  {\n    if('safari' in window && 'pushNotification' in window.safari) \n    {\n      var permissionData = window.safari.pushNotification.permission(pushId);\n      $scope.checkRemotePermission(permissionData);\n    } else \n    {\n      alert(\"Push notifications not supported.\");\n    }\n  }\n  \n  // Check remote permissions\n  $scope.checkRemotePermission = function (permissionData) {\n    \n    if(permissionData.permission === 'default') \n    {\n      // Get permissions \n      window.safari.pushNotification.requestPermission(\n        site.app_url,\n        pushId,\n        { UsersId: site.user_id },\n        $scope.checkRemotePermission\n      );\n    } else if(permissionData.permission === 'denied') \n    {\n      $scope.apple_messaging_activated = true;\n      console.dir(arguments);\n    } else if(permissionData.permission === 'granted') \n    {\n      $scope.apple_messaging_activated = true;\n      //console.log(\"The user said yes, with token: \"+ permissionData.deviceToken);\n    }\n  }\n\n  // -------------- End Apple Push Notifications ----------- //   \n});","app.config(['$routeProvider', '$locationProvider', function($routeProvider, $locationProvider) {\n  \n  $routeProvider.\n\n    // /a/dashboard\n    when('/a/dashboard', {\n      templateUrl: '/app/html/dashboard/index.html',\n      controller: 'DashboardCtrl'\n    }).\n    \n    // /a/screener/credit-spreads\n    when('/a/screener/credit-spreads', {\n      templateUrl: '/app/html/screener/credit-spreads.html',\n      controller: 'ScreenerCreditSpreadsCtrl'\n    }).\n    \n    // /a/accounting/assets\n    when('/a/accounting/assets', {\n      templateUrl: '/app/html/accounting/assets.html',\n      controller: 'AccountingAssetsCtrl'\n    }). \n    \n    // /a/accounting/shares\n    when('/a/accounting/shares', {\n      templateUrl: '/app/html/accounting/shares.html',\n      controller: 'AccountingSharesCtrl'\n    }). \n    \n    // /a/accounting/shares/add\n    when('/a/accounting/shares/add', {\n      templateUrl: '/app/html/accounting/shares-add-edit.html',\n      controller: 'AccountingSharesAddEditCtrl',\n      resolve: { action: function() { return 'add'; } }  \n    }). \n    \n    // /a/accounting/shares/remove\n    when('/a/accounting/shares/remove', {\n      templateUrl: '/app/html/accounting/shares-add-edit.html',\n      controller: 'AccountingSharesAddEditCtrl',\n      resolve: { action: function() { return 'remove'; } }        \n    }).            \n\n    // /a/accounting/income\n    when('/a/accounting/income', {\n      templateUrl: '/app/html/accounting/income.html',\n      controller: 'AccountingIncomeCtrl'\n    }). \n\n    // /a/accounting/expenses\n    when('/a/accounting/expenses', {\n      templateUrl: '/app/html/accounting/expenses.html',\n      controller: 'AccountingExpensesCtrl'\n    }). \n    \n    // /a/accounting/expenses/add\n    when('/a/accounting/expenses/add', {\n      templateUrl: '/app/html/accounting/expenses-add-edit.html',\n      controller: 'AccountingExpensesAddEditCtrl',\n      resolve: { action: function() { return 'add'; } }  \n    }).     \n\n    // /a/reports/income-statement\n    when('/a/reports/income-statement', {\n      templateUrl: '/app/html/reports/income-statement.html',\n      controller: 'ReportsIncomeStatementCtrl'\n    }).\n\n    // /a/reports/orders\n    when('/a/reports/orders', {\n      templateUrl: '/app/html/reports/orders.html',\n      controller: 'ReportsOrdersCtrl'\n    }). \n    \n    // /a/reports/activity\n    when('/a/reports/activity', {\n      templateUrl: '/app/html/reports/activity.html',\n      controller: 'ReportsActivityCtrl'\n    }).     \n    \n    // /a/reports/performance\n    when('/a/reports/performance', {\n      templateUrl: '/app/html/reports/performance.html',\n      controller: 'ReportsPerformanceCtrl'\n    }). \n    \n     // /a/reports/tradierhistory\n    when('/a/reports/tradier-history', {\n      templateUrl: '/app/html/reports/tradierhistory.html',\n      controller: 'ReportsTradierHistoryCtrl'\n    }).    \n    \n    // /a/backtest/option-spreads\n    when('/a/backtest/option-spreads', {\n      templateUrl: '/app/html/backtest/option-spreads.html',\n      controller: 'BacktestOptionsSpreadsCtrl'\n    }).\n\n    // /a/backtest/option-spreads/:id\n    when('/a/backtest/option-spreads/:id', {\n      templateUrl: '/app/html/backtest/option-spreads-view.html',\n      controller: 'BacktestOptionsSpreadsViewCtrl'\n    }).\n    \n    // /a/trades\n    when('/a/trades', {\n      templateUrl: '/app/html/trades/index.html',\n      controller: 'TradesCtrl'\n    }).\n    \n    // /a/trade-groups\n    when('/a/trade-groups', {\n      templateUrl: '/app/html/trade-groups/index.html',\n      controller: 'TradeGroupsCtrl'\n    }).                    \n\n    // /a/settings\n    when('/a/settings', {\n      templateUrl: '/app/html/settings/index.html',\n      controller: 'SettingsCtrl'\n    }). \n\n    otherwise({ redirectTo: '/a/dashboard' });\n    \n  // HTML 5 Mode\n  $locationProvider.html5Mode(true);\n}]);","//\n// Date to ISO\n//\napp.filter('dateToISO', function() {\n  return function(input) {\n    return new Date(input).toISOString();\n  };\n});","//\n// Site wide controller.\n//\napp.controller('DashboardCtrl', function ($scope, $http, $location, $timeout, $filter) \n{  \n  $scope.$parent.tab = 'dashboard';\n  \n  $scope.quotes = {}\n  $scope.quote_first_run = false;\n  \n  $scope.chart_sym = 'spy';\n  $scope.chart_range = 'today-1'; \n  \n  $scope.orders = [];\n\n  $scope.quotes = {};  \n  $scope.watchlist = [];\n  $scope.watchlist_timestamp = ''; \n  \n  \n  $scope.trade_groups_put_credit_spread = [];\n  $scope.trade_groups_call_credit_spread = [];  \n  $scope.positions_stocks = [];\n   \n\n  // When the socket connects (or reconnects);\n  $scope.$on('Status:connected', function (event, args) {    \n    $scope.chart_refresh();\n  });\n\n  // Catch Websocket event - Timmer:60seconds - just a timer that fires every 60 seconds \n  $scope.$on('Timmer:60seconds', function (event, args) { \n    \n    // Refresh Timesales chart\n    $scope.chart_refresh();\n    \n  });\n\n  // Catch Websocket event - Quotes:get_quotes\n  $scope.$on('Quotes:get_quote', function (event, args) {\n    \n    // Wait for the first AJAX call before accepting websockets.\n    if(! $scope.quote_first_run)\n    {\n      return false;\n    }\n        \n    $scope.quotes[args.data.symbol] = args.data;\n    $scope.watchlist_timestamp = args.timestamp;\n    $scope.$apply();\n  });\n\n  // Catch a websocket event - Positions:refresh\n  // Since positions are complex the websocket just\n  // tells us when the the positions change so we can\n  // make an api call to the server and get the updated position.\n  $scope.$on('Positions:refresh', function (event, args) {  \n    $scope.get_positions_by_types();\n  });\n  \n  // Catch Websocket event - Orders:get_open_orders\n  $scope.$on('Orders:open', function (event, args) {\n    $scope.orders = JSON.parse(args.data).orders.order;\n    $scope.$apply();\n  });\n  \n  // Figure out gain / loss of a spread.\n  $scope.spread_gain_loss = function (spread, type)\n  {    \n    if(! $scope.quotes[spread.Positions[1].SymbolsShort])\n    {\n      return 0;\n    }\n    \n    if(type == 'put')\n    {\n      \n      //console.log((spread.TradeGroupsOpen * -1) - ((($scope.quotes[spread.Positions[1].SymbolsShort].ask - $scope.quotes[spread.Positions[0].SymbolsShort].bid) * 100) * spread.Positions[0].PositionsQty) );\n      \n      return (spread.TradeGroupsOpen * -1) - ((($scope.quotes[spread.Positions[1].SymbolsShort].ask - $scope.quotes[spread.Positions[0].SymbolsShort].bid) * 100) * spread.Positions[0].PositionsQty)       \n    } else\n    {\n      return (spread.TradeGroupsOpen * -1) - ((($scope.quotes[spread.Positions[0].SymbolsShort].ask - $scope.quotes[spread.Positions[1].SymbolsShort].bid) * 100) * spread.Positions[1].PositionsQty)      \n    }\n  }\n  \n  // Figure out spread precent_to_close\n  $scope.spread_precent_to_close = function (spread, type)\n  {    \n    if(! $scope.quotes[spread.Positions[1].SymbolsShort])\n    {\n      return 0;\n    }\n    \n    return ($scope.spread_gain_loss(spread, type) / (spread.TradeGroupsOpen * -1)) * 100;     \n  }  \n  \n  // Figure out percent away.\n  $scope.percent_away = function (row, type)\n  {\n    // Find the short strike.\n    var short_strike = null; \n    \n    for(var i in row.Positions)\n    {\n      if(row.Positions[i].PositionsType != 'Option')\n      {\n        continue;\n      }\n      \n      if(row.Positions[i].PositionsQty < 0)\n      {\n        short_strike = row.Positions[i];\n      }\n    }\n\n    if(! $scope.quotes[short_strike.SymbolsShort])\n    {\n      return '';\n    }\n    \n    \n    if(type == 'put')\n    {\n      return ((parseFloat($scope.quotes[short_strike.SymbolsUnderlying].last) - parseFloat(short_strike.SymbolsStrike)) / \n                ((parseFloat($scope.quotes[short_strike.SymbolsUnderlying].last) + parseFloat(short_strike.SymbolsStrike)) / 2)) * 100;\n    } else\n    {\n      return ((parseFloat(short_strike.SymbolsStrike) - parseFloat($scope.quotes[short_strike.SymbolsUnderlying].last)) / \n                 parseFloat($scope.quotes[short_strike.SymbolsUnderlying].last)) * 100;      \n    }\n  }\n  \n  // Get the total cost baises of the positions\n  $scope.get_positions_get_total_value = function ()\n  {        \n    var total = 0;\n    \n    for(var i in $scope.positions_stocks)\n    {\n    \n      if(! $scope.quotes[$scope.positions_stocks[i].SymbolsShort])\n      {\n        return 0;\n      }      \n      \n      total = total + (parseFloat($scope.quotes[$scope.positions_stocks[i].SymbolsShort].last) * parseFloat($scope.positions_stocks[i].PositionsQty));\n    }\n    \n    return total;\n  }\n  \n  // Get the total value of the positions\n  $scope.get_positions_get_total_cost_baises = function ()\n  {\n    var total = 0;\n    \n    for(var i in $scope.positions_stocks)\n    {\n      total = total +  parseFloat($scope.positions_stocks[i].PositionsCostBasis);\n    }\n    \n    return total;\n  }  \n  \n  // Return total credit of positions.\n  $scope.total_put_spread_credit = function ()\n  {\n    var total = 0;\n    \n    for(var i in $scope.trade_groups_put_credit_spread)\n    {\n      if($scope.trade_groups_put_credit_spread[i].TradeGroupsType != 'Put Credit Spread')\n      {\n        continue;\n      }\n      \n      total = total + ($scope.trade_groups_put_credit_spread[i].TradeGroupsOpen * -1)\n    }\n        \n    return total;\n  } \n  \n  // Return total credit of positions.\n  $scope.total_call_spread_credit = function ()\n  {\n    var total = 0;\n    \n    for(var i in $scope.trade_groups_call_credit_spread)\n    {\n      if($scope.trade_groups_call_credit_spread[i].TradeGroupsType != 'Call Credit Spread')\n      {\n        continue;\n      }\n      \n      total = total + ($scope.trade_groups_call_credit_spread[i].TradeGroupsOpen * -1)\n    }\n        \n    return total;\n  }    \n  \n  // Return the days to expire.\n  $scope.days_to_expire = function (row)\n  {\n    var expire_date = new Date(row.Positions[0].SymbolsExpire + ' 00:00:00');     \n    return Math.round((expire_date - new Date()) / (1000 * 60 * 60 * 24));\n  }\n  \n  // Close credit option trade\n  $scope.close_credit_option_trade = function (row, debit)\n  {    \n    var order = {\n      class: 'multileg',\n      symbol: 'SPY',\n      duration: 'gtc',\n      type: 'debit',\n      preview: 'true',\n      price: debit,\n      \n      side: [\n        'sell_to_close',\n        'buy_to_close'\n      ],\n      \n      option_symbol: [\n        row.Positions[0].SymbolsShort,\n        row.Positions[1].SymbolsShort\n      ],\n      \n      quantity: [ row.Positions[0].PositionsQty, row.Positions[0].PositionsQty ]\n    };\n    \n    // Send a request for preview for the order.\n    $http.post('/api/v1/trades/preview_trade', { order: order }).success(function (json) {\n      \n      if(! json.status)\n      {\n        alert(json.errors[0].error);\n        return false;\n      }\n      \n      json.data.action = 'close';\n      json.data.lots = row.Positions[0].PositionsQty;\n      json.data.buy_leg = row.Positions[1].SymbolsFull \n      json.data.sell_leg = row.Positions[0].SymbolsFull;       \n      $scope.$emit('order-preview:credit-spreads', { preview: json.data, order: order });\n    });\n  }\n  \n  // Clicked on the watch list.\n  $scope.watchlist_click = function (sym)\n  {\n    $scope.chart_sym = sym;\n    $scope.chart_refresh();\n  }\n  \n  // Change the range on the chart.\n  $scope.chart_refresh = function ()\n  {\n    // Put chart into loading state.\n    var chart = $('#chart').highcharts();\n    chart.showLoading('Loading data from server...');        \n    \n    // Get data.\n    $http.get('/api/v1/quotes/timesales?preset=' + $scope.chart_range + '&symbol=' + $scope.chart_sym).success(function (json) {\n      \n      // Setup the data.\n      var data = [];\n      \n      for(var i = 0; i < json.data.length; i++)\n      {\n        data.push({\n          x: (json.data[i].timestamp * 1000) - (60 * 60 * 8 * 1000), // UTM time (have to update this with day light savings time).\n          open: json.data[i].open,\n          high: json.data[i].high,\n          low: json.data[i].low,\n          close: json.data[i].close,\n          name: $scope.chart_sym.toUpperCase(),\n          //color: '#00FF00'\n        });\n      }\n      \n      // Hide Loader\n      var chart = $('#chart').highcharts();\n      chart.showLoading('Loading data from server...');  \n      chart.series[0].setData(data);\n      chart.xAxis[0].setExtremes();\n      chart.hideLoading();      \n    });\n  }\n  \n  // Setup stock chart at the top of the page.\n  $scope.setup_chart = function ()\n  {        \n    // create the chart\n    $('#chart').highcharts('StockChart', {\n      title: { text: '' },\n      credits: { enabled: false },\n    \n      rangeSelector: { enabled: false },\n      \n      yAxis: {\n        startOnTick: false,\n        endOnTick: false,\n        minPadding: 0.1,\n        maxPadding: 0.1          \n      },  \n      \n      xAxis : {\n        //events : { afterSetExtremes : afterSetExtremes },\n        minRange: 3600 * 1000 // one hour\n      },              \n    \n      series : [{\n        name : 'SPY',\n        type: 'candlestick',\n        data: [],\n        turboThreshold: 0,\n        tooltip: { valueDecimals: 2 },\n        dataGrouping: { enabled: false }\n      }]\n    \n    });    \n    \n    // Load data.\n    $timeout(function () { $scope.chart_refresh(); }, 1000);    \n  }\n    \n  $scope.setup_chart();\n  \n  // Get watchlist\n  $scope.get_watchlist = function ()\n  {\n    $http.get('/api/v1/me/get_watchlist').success(function (json) {\n      $scope.watchlist = json.data;\n    });\n  }\n  \n  $scope.get_watchlist();\n  \n  // Send a request to API all our positions\n  $scope.get_positions_by_types = function ()\n  {  \n    $http.get('/api/v1/tradegroups?filter=open-only&only-open-positions=true&only-put-credit-spreads=true').success(function (json) {\n      $scope.trade_groups_put_credit_spread = json.data;    \n    });\n\n    $http.get('/api/v1/tradegroups?filter=open-only&only-open-positions=true&only-call-credit-spreads=true').success(function (json) {\n      $scope.trade_groups_call_credit_spread = json.data;    \n    });\n\n    \n    $http.get('/api/v1/positions?col_SymbolsType=Stock&col_PositionsStatus=Open').success(function (json) {\n      $scope.positions_stocks = json.data;    \n    });    \n  }\n  \n  $scope.get_positions_by_types();\n  \n  // Get open orders.\n  $http.get('/api/v1/orders/get_open').success(function (json) {\n    $scope.orders = json.data;       \n  });\n  \n  // Get quotes. We do this via API call first. Then the websocket takes over.\n  $scope.get_quotes = function ()\n  {\n    // Get the quote data and then loop over it.\n    $http.get('/api/v1/quotes/get_account_quotes').success(function (json) {\n      \n      for(var i = 0; i < json.data.length; i++)\n      {\n        $scope.quotes[json.data[i].symbol] = json.data[i];      \n      }\n      \n      $scope.quote_first_run = true;\n\n    });\n  }\n  \n  $scope.get_quotes(); \n  \n});","//\n// Site wide controller.\n//\napp.controller('ScreenerCreditSpreadsCtrl', function ($scope, $http) \n{\n  $scope.$parent.tab = 'screener';\n\n  $scope.quotes = [];\n$scope.quote_first_run = true;  \n  \n  $scope.watchlist = [];\n  $scope.watchlist_timestamp = '';  \n  $scope.credit_spread_45 = [];\n  $scope.credit_spread_45_timestamp = '';\n  $scope.credit_spread_weekly = [];\n  $scope.credit_spread_weekly_timestamp = '';\n\n  // Catch Websocket event - Quotes:get_quotes\n  $scope.$on('Quotes:get_quote', function (event, args) {  \n  \n    // Wait for the first AJAX call before accepting websockets.\n    if(! $scope.quote_first_run)\n    {\n      return false;\n    }    \n      \n    $scope.quotes[args.data.symbol] = args.data;\n    $scope.watchlist_timestamp = args.timestamp;\n    $scope.$apply();\n  });\n  \n  // Catch Websocket event - Autotrade:get_possible_spy_put_credit_spreads_45_days_out\n  $scope.$on('Autotrade:get_possible_spy_put_credit_spreads_45_days_out', function (event, args) {\n    $scope.credit_spread_45 = args.data;\n    $scope.credit_spread_45_timestamp = args.timestamp;\n    $scope.$apply();\n  });  \n\n  // Catch Websocket event - Autotrade:get_possible_spy_put_credit_spreads_weeklies\n  $scope.$on('Autotrade:get_possible_spy_put_credit_spreads_weeklies', function (event, args) {\n    $scope.credit_spread_weekly = args.data;\n    $scope.credit_spread_weekly_timestamp = args.timestamp;\n    $scope.$apply();\n  });\n\t\n  // Place order\n  $scope.open_midpoint = function (row, lots)\n  {    \n    var order = {\n      class: 'multileg',\n      symbol: 'SPY',\n      duration: 'day',\n      type: 'credit',\n      preview: 'true',\n      price: row.midpoint,\n      \n      side: [\n        'buy_to_open',\n        'sell_to_open'\n      ],\n      \n      option_symbol: [\n        row.occ_buy,\n        row.occ_sell\n      ],\n      \n      quantity: [ lots, lots ]\n    };\n    \n    // Send a request for preview for the order.\n    $http.post('/api/v1/trades/preview_trade', { order: order }).success(function (json) {\n      \n      if(! json.status)\n      {\n        alert(json.errors[0].error);\n        return false;\n      }\n      \n      json.data.lots = lots;\n      json.data.action = 'open';\n      json.data.buy_leg = 'SPY ' + row.buy_leg + ' ' + row.expire_df1 + ' Put'; \n      json.data.sell_leg = 'SPY ' + row.sell_leg + ' ' + row.expire_df1 + ' Put';       \n      $scope.$emit('order-preview:credit-spreads', { preview: json.data, order: order });\n    });\n  } \n  \n  // Get watchlist\n  $scope.get_watchlist = function ()\n  {\n    $http.get('/api/v1/me/get_watchlist').success(function (json) {\n      $scope.watchlist = json.data;\n    });\n  }\n  \n  $scope.get_watchlist();  \n\t\n  // Send a request for the newest SPY 45 days away data.\n  $http.get('/api/v1/autotrade/spy_percent_away').success(function (json) {\n    $scope.credit_spread_45 = json.data;\n  });\n  \n  // Send a request for the newest SPY weekly data.\n  $http.get('/api/v1/autotrade/spy_weekly_percent_away').success(function (json) {\n    $scope.credit_spread_weekly = json.data;\n  }); \n  \n  // Get quotes. We do this via API call first. Then the websocket takes over.\n  $scope.get_quotes = function ()\n  {\n    // Get the quote data and then loop over it.\n    $http.get('/api/v1/quotes/get_account_quotes').success(function (json) {\n      \n      for(var i = 0; i < json.data.length; i++)\n      {\n        $scope.quotes[json.data[i].symbol] = json.data[i];      \n      }\n      \n      $scope.quote_first_run = true;\n\n    });\n  }\n  \n  $scope.get_quotes();    \n});","//\n// Assets\n//\napp.controller('AccountingAssetsCtrl', function ($scope, $http) \n{\n  $scope.$parent.tab = 'accounting'; \n  \n  $scope.assets = [];\n  \n  // Catch Websocket event - Assets:update\n  $scope.$on('Assets:update', function (event, args) {\n    $scope.refresh_assets();\n    $scope.$apply();\n  });  \n  \n  // Return a total of all assets\n  $scope.total = function ()\n  {\n    var total = 0;\n    \n    for(var i in $scope.assets)\n    {\n      total = total + parseFloat($scope.assets[i].AssetsValue);\n    }\n    \n    return total;\n  }\n  \n  // Save a mark\n  $scope.mark_save = function (row)\n  {\n    row.asset_mark = false;\n    \n    // Send update to the API.\n    $http.post('/api/v1/assets/update/' + row.AssetsId, { AssetsValue: row.AssetsValue }).success(function (json) {\n      // Websocket will do that updating.   \n    });\n  }\n  \n  // Get a list of assets\n  $scope.refresh_assets = function ()\n  {\n    $http.get('/api/v1/assets?order=AssetsName&sort=asc').success(function (json) {\n      $scope.assets = json.data;\n    });\n  }\n  \n  $scope.refresh_assets(); \n});\n\n//\n// Shares\n//\napp.controller('AccountingSharesCtrl', function ($scope, $http) \n{\n  $scope.$parent.tab = 'accounting'; \n  \n  $scope.shares = [];\n  \n  // Get a list of shares\n  $scope.refresh_shares = function ()\n  {\n    $http.get('/api/v1/shares?order=SharesDate&sort=desc').success(function (json) {\n      $scope.shares = json.data;\n    });\n  }\n  \n  $scope.refresh_shares(); \n});\n\n//\n// Shares - Add / Edit.\n//\napp.controller('AccountingSharesAddEditCtrl', function ($scope, $http, $location, action) \n{\n  $scope.$parent.tab = 'accounting'; \n \n  $scope.action = action;\n  \n  if($scope.action == 'add')\n  {\n    $scope.submit_btn = 'Add Shares';\n  } else\n  {\n    $scope.submit_btn = 'Remove Shares';    \n  }\n  \n  $scope.fields = {\n    SharesDate: new Date(),\n    SharesPrice: '',\n    SharesNote: ''\n  }\n  \n  // Submit the request.\n  $scope.submit = function ()\n  {    \n    var error = false;\n    \n    if($scope.fields.SharesPrice)\n    {\n      $scope.fields.SharesPrice_error = '';\n    } else\n    {\n      error = true;\n      $scope.fields.SharesPrice_error = 'An amount is required.';      \n    }\n    \n    if(error)\n    {\n      return false;\n    }\n\n    // Make negative if shares are to be removed.\n    if($scope.action == 'remove')\n    {\n      $scope.fields.SharesPrice = $scope.fields.SharesPrice * -1;\n    }\n    \n    // Send request to server\n    $http.post('/api/v1/shares/create', $scope.fields).success(function (json) {\n      $location.path('/a/accounting/shares');\n    });\n    \n  }\n\n});\n\n//\n// Income\n//\napp.controller('AccountingIncomeCtrl', function ($scope, $http) \n{\n  $scope.$parent.tab = 'accounting'; \n  \n  $scope.income = [];\n  \n  // Get a list of income\n  $scope.refresh = function ()\n  {\n    $http.get('/api/v1/income?order=IncomeDate&sort=desc').success(function (json) {\n      $scope.income = json.data;\n    });\n  }\n  \n  $scope.refresh(); \n});\n\n//\n// Expenses\n//\napp.controller('AccountingExpensesCtrl', function ($scope, $http) \n{\n  $scope.$parent.tab = 'accounting'; \n  \n  $scope.expenses = [];\n  \n  // Get a list of income\n  $scope.refresh = function ()\n  {\n    $http.get('/api/v1/expenses?order=ExpensesDate&sort=desc').success(function (json) {\n      $scope.expenses = json.data;\n    });\n  }\n  \n  $scope.refresh(); \n});\n\n//\n// Expenses - Add / Edit.\n//\napp.controller('AccountingExpensesAddEditCtrl', function ($scope, $http, $location, action) \n{\n  $scope.$parent.tab = 'accounting'; \n \n  $scope.action = action;\n  $scope.vendors = [];\n  $scope.categories = [];\n  $scope.submit_btn = 'Add Expense';\n  \n  $scope.fields = {\n    ExpensesDate: new Date(),\n    ExpensesVendor: '',\n    ExpensesCategory: '',\n    ExpensesAmount: '',\n    ExpensesNote: ''\n  }\n  \n  // Get categories and vendors\n  $scope.get_categories_vendors = function () \n  {\n    // Get categories\n    $http.get('/api/v1/expenses/get_categories').success(function (json) {\n      $scope.categories = json.data;\n      $scope.fields.ExpensesCategory = $scope.categories[0];\n    });\n    \n    // Get Vendors\n    $http.get('/api/v1/expenses/get_vendors').success(function (json) {\n      $scope.vendors = json.data;\n      $scope.fields.ExpensesVendor = $scope.vendors[0];\n    });    \n  }\n  \n  // Submit the request.\n  $scope.submit = function ()\n  {    \n    var error = false;\n    \n    if($scope.fields.ExpensesAmount)\n    {\n      $scope.fields.ExpensesAmount_error = '';\n    } else\n    {\n      error = true;\n      $scope.fields.ExpensesAmount_error = 'An amount is required.';      \n    }\n    \n    if(error)\n    {\n      return false;\n    }\n    \n    console.log($scope.fields);\n    \n    \n    // Send request to server\n    $http.post('/api/v1/expenses/create', $scope.fields).success(function (json) {\n      $location.path('/a/accounting/expenses');\n    });\n    \n  }\n  \n  // Load data.\n  $scope.get_categories_vendors();\n});","//\n// Income Statement\n//\napp.controller('ReportsIncomeStatementCtrl', function ($scope, $http, $routeParams, $location) \n{  \n  $scope.statement = [];\n  $scope.date_start = $routeParams.start;\n  $scope.date_end = $routeParams.end;\n  \n  // Date change.\n  $scope.date_change = function ()\n  {\n    $location.path('/a/reports/income-statement').search({ start: $scope.date_start, end: $scope.date_end });\n  }\n  \n  $http.get('/api/v1/reports/income_statement?start=' + $routeParams.start + '&end=' + $routeParams.end).success(function (json) {\n    $scope.statement = json.data;\n  });\n});\n\n//\n// Orders\n//\napp.controller('ReportsOrdersCtrl', function ($scope, $http) \n{\n  $scope.$parent.tab = 'reports'; \n  \n  $scope.orders = [];\n  \n  // Catch Websocket event - Orders:insert\n  $scope.$on('Orders:insert', function (event, args) {    \n    $scope.refresh_orders();\n    $scope.$apply();\n  });    \n\n  // Catch Websocket event - Orders:update\n  $scope.$on('Orders:update', function (event, args) {\n    $scope.refresh_orders();\n    $scope.$apply();\n  });\n    \n  // Get a list of orders\n  $scope.refresh_orders = function ()\n  {\n    $http.get('/api/v1/orders?order=OrdersEntered&sort=desc').success(function (json) {\n      $scope.orders = json.data;\n    });\n  }\n  \n  $scope.refresh_orders(); \n});\n\n//\n// Activity\n//\napp.controller('ReportsActivityCtrl', function ($scope, $http) \n{\n  $scope.$parent.tab = 'reports'; \n  \n  $scope.activity = [];\n  \n  // Catch Websocket event - Activity:insert\n  $scope.$on('Activity:insert', function (event, args) {    \n    $scope.refresh();\n    $scope.$apply();\n  });    \n\n  // Catch Websocket event - Activity:update\n  $scope.$on('Activity:update', function (event, args) {\n    $scope.refresh();\n    $scope.$apply();\n  });\n    \n  // Get a list of Activity\n  $scope.refresh = function ()\n  {\n    $http.get('/api/v1/activity?order=ActivityId&sort=desc').success(function (json) {\n      $scope.activity = json.data;\n    });\n  }\n  \n  $scope.refresh(); \n});\n\n//\n// Performance\n//\napp.controller('ReportsPerformanceCtrl', function ($scope, $http) \n{\n  $scope.$parent.tab = 'reports'; \n  \n  $scope.marks = [];\n  \n  // Catch Websocket event - Assets:update\n  $scope.$on('Assets:update', function (event, args) {\n    $scope.refresh_marks();\n    $scope.$apply();\n  });    \n    \n  // Get a list of marks\n  $scope.refresh_marks = function ()\n  {\n    $http.get('/api/v1/marks?order=MarksDate&sort=desc').success(function (json) {\n      $scope.marks = json.data;\n    });\n  }\n  \n  $scope.refresh_marks(); \n});\n\n//\n// Tradier History\n//\napp.controller('ReportsTradierHistoryCtrl', function ($scope, $http) \n{\n  $scope.$parent.tab = 'reports'; \n  \n  $scope.activity = [];\n    \n  // Get a list of Activity\n  $scope.refresh = function ()\n  {\n    $http.get('/api/v1/tradierhistory?order=TradierHistoryDate&sort=desc').success(function (json) {\n      $scope.history = json.data;\n    });\n  }\n  \n  $scope.refresh(); \n});","//\n// Option Spreads\n//\napp.controller('BacktestOptionsSpreadsCtrl', function ($scope, $http, $location) \n{\n  $scope.$parent.tab = 'backtest'; \n\n  $scope.trades = [];\n  $scope.started = false;\n  $scope.progress = 0;\n  $scope.backtest_id = 0;\n  \n  $scope.fields = {\n    BackTestsName: '',\n    BackTestsType: 'Put Credit Spreads',\n    BackTestsStart: '1/1/2015',\n    BackTestsEnd: '12/31/2015',\n    BackTestsStartBalance: '30000.00',\n    BackTestsTradeSize: 'percent-10',\n    BackTestsCloseAt: 'credit-0.03',\n    BackTestsMinDaysExpire: '1',\n    BackTestsMaxDaysExpire: '45',\n    BackTestsStopAt: 'touch-short-leg',\n    BackTestsOpenAt: 'precent-away',\n    BackTestOpenPercentAway: '4.00',\n    BackTestsMinOpenCredit: '0.18',\n    BackTestsOneTradeAtTime: 'No',  \n    BackTestsTradeSelect: 'lowest-credit'    \n  }\n  \n  // Catch Websocket event - Backtesting:order\n  $scope.$on('Backtesting:order', function (event, args) {\n    $scope.started = true;    \n    $scope.trades.push(args.data);\n    $scope.$apply();\n  });  \n\n  // Catch Websocket event - Backtesting:done\n  $scope.$on('Backtesting:done', function (event, args) {\n    $location.path('/a/backtest/option-spreads/' + $scope.backtest_id);\n    $scope.$apply();\n  }); \n  \n  // Catch Websocket event - Backtesting:progress\n  $scope.$on('Backtesting:progress', function (event, args) {\n    $scope.progress = args.data.progress;\n    $scope.$apply();\n  }); \n  \n  // Run the backtest.\n  $scope.run_backtest = function ()\n  {\n    $scope.started = true;\n    $scope.progress = 0;\n    $scope.trades = [];\n    \n    // Setup the backtest.\n    $http.post('/api/v1/backtests/setup_backtest', $scope.fields).success(function (json) {\n\n      $scope.backtest_id = json.data.Id;\n\n      // Run the backtest.\n      $http.post('/api/v1/backtests/run', { BackTestsId: $scope.backtest_id }).success(function (json) {\n        \n        // Do nothing....\n\n      });\n      \n    });\n  }    \n});\n\n//\n// Option Spreads - View\n//\napp.controller('BacktestOptionsSpreadsViewCtrl', function ($scope, $http, $routeParams) \n{\n  $scope.fields = {}\n  \n  // Get the backtest\n  $http.get('/api/v1/backtests/' + $routeParams.id).success(function (json) {\n    $scope.fields = json.data;\n    $scope.trades = json.data.Trades;\n  });\n});","//\n// Trades\n//\napp.controller('TradesCtrl', function ($scope, $http) \n{\n  $scope.$parent.tab = 'trades'; \n  \n  $scope.trades = [];\n  $scope.pl_2014 = '';\n  $scope.pl_2015 = '';  \n  $scope.pl_2016 = ''; \n  $scope.pl_2017 = '';\n  \n  // Catch Websocket event - Trades:insert\n  $scope.$on('Trades:insert', function (event, args) {\n    $scope.refresh_trades();\n    $scope.$apply();\n  });\n  \n  // Catch Websocket event - Trades:update\n  $scope.$on('Trades:update', function (event, args) {\n    $scope.refresh_trades();\n    $scope.$apply();\n  });  \n  \n  // Blog trade.\n  $scope.blog_trade = function (row)\n  {\n    // TradesId\n    $http.post('/api/v1/blogtrades/insert_by_tradeid', { TradesId: row.TradesId }).success(function (json) {\n      alert('Success!!');\n    });\n  }\n  \n  // Close trade at $0.03\n  $scope.close_at_3 = function (row)\n  {\n    // Build object to post to the API.\n    var post = {\n      TradesNote: 'Closed @ 0.03',\n      TradesEndCommission: row.TradesStartCommission,\n      TradesDateEnd: new Date().toISOString().slice(0, 19).replace('T', ' '),\n      TradesEndPrice: (row.TradesShares * row.TradesSpreadWidth1) - (3 * row.TradesShares),\n      TradesStatus: 'Closed'\n    }\n    \n    // Send request to the server.\n    $http.post('/api/v1/trades/update/' + row.TradesId, post).success(function (json) {\n      $scope.refresh_trades();\n      $scope.preview_credit_spreads = true;\n    });\n  }  \n  \n  // Close trades that expire.\n  $scope.close_exired = function (row)\n  {\n    // Build object to post to the API.\n    var post = {\n      TradesNote: 'Expired worthless',\n      TradesEndCommission: 0.00,\n      TradesDateEnd: new Date().toISOString().slice(0, 19).replace('T', ' '),\n      TradesEndPrice: row.TradesShares * row.TradesSpreadWidth1,\n      TradesStatus: 'Closed'\n    }\n    \n    // Send request to the server.\n    $http.post('/api/v1/trades/update/' + row.TradesId, post).success(function (json) {\n      $scope.refresh_trades();\n    });\n  }\n  \n  // Get a list of trades\n  $scope.refresh_trades = function ()\n  {\n    $http.get('/api/v1/trades?order=TradesId&sort=desc').success(function (json) {\n      $scope.trades = json.data;\n    });\n    \n    $http.get('/api/v1/trades/pl_by_year/2014').success(function (json) {\n      $scope.pl_2014 = json.data.p_l_df;\n    });\n    \n    $http.get('/api/v1/trades/pl_by_year/2015').success(function (json) {\n      $scope.pl_2015 = json.data.p_l_df;\n    }); \n \n    $http.get('/api/v1/trades/pl_by_year/2016').success(function (json) {\n      $scope.pl_2016 = json.data.p_l_df;\n    });\n    \n    $http.get('/api/v1/trades/pl_by_year/2017').success(function (json) {\n      $scope.pl_2017 = json.data.p_l_df;\n    });              \n  }\n  \n  $scope.refresh_trades(); \n});","//\n// TradeGroupsCtrl\n//\napp.controller('TradeGroupsCtrl', function ($scope, $http) \n{\n  $scope.$parent.tab = 'trades';\n  \n  $scope.filter = 'show-all';\n  $scope.trade_groups = [];\n  $scope.pl_2014 = '';\n  $scope.pl_2015 = ''; \n  $scope.pl_2016 = '';      \n  $scope.pl_2017 = ''; \n  \n  // Get a list of trades\n  $scope.refresh = function ()\n  {\n    $http.get('/api/v1/tradegroups?order=TradeGroupsId&sort=desc&filter=' + $scope.filter).success(function (json) {\n      $scope.trade_groups = json.data;\n    });\n    \n    $http.get('/api/v1/trades/pl_by_year/2014').success(function (json) {\n      $scope.pl_2014 = json.data.p_l_df;\n    });\n    \n    $http.get('/api/v1/trades/pl_by_year/2015').success(function (json) {\n      $scope.pl_2015 = json.data.p_l_df;\n    });    \n    \n    $http.get('/api/v1/trades/pl_by_year/2016').success(function (json) {\n      $scope.pl_2016 = json.data.p_l_df;\n    });\n    \n    $http.get('/api/v1/trades/pl_by_year/2017').success(function (json) {\n      $scope.pl_2017 = json.data.p_l_df;\n    });           \n  }\n  \n  $scope.refresh();  \n  \n});","//\n// Settings\n//\napp.controller('SettingsCtrl', function ($scope, $http, $routeParams, $location) \n{  \n  $scope.user = {}\n  \n  // Save user settings.\n  $scope.save_configs = function ()\n  {\n    $http.post('/api/v1/me/update_settings', $scope.user).success(function (json) {\n      $scope.refresh_logged_in_user();\n      alert('Successfully Updated.');\n    });\n  }\n  \n  // Get user settings.\n  $scope.get_me = function ()\n  {\n    $http.get('/api/v1/me').success(function (json) {\n      $scope.user = json.data;\n    });\n  }\n  \n  // Load page data.\n  $scope.get_me();\n});\n\n/* End File */"]}